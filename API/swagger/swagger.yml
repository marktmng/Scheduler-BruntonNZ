swagger: "2.0"
info:
  title: Scheduler Test API
  description: |
    API fot scheduler application
  version: 1.0.0
  termsOfService: http://beego.me/
  contact:
    email: pavelkiwiandrosov.00@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
basePath: /v1
paths:
  /task/:
    get:
      tags:
      - task
      description: |-
        get all Tasks
        <br>
      operationId: TaskController.GetAllTasks
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Task'
    post:
      tags:
      - task
      description: |-
        create users
        <br>
      operationId: TaskController.CreateTask
      parameters:
      - in: body
        name: body
        description: body for user content
        required: true
        schema:
          $ref: '#/definitions/models.Task'
      responses:
        "200":
          description: '{int} models.Task.Task_code'
        "403":
          description: body is empty
  /task/{task_code}:
    get:
      tags:
      - task
      description: |-
        get task by task_code
        <br>
      operationId: TaskController.GetTask
      parameters:
      - in: path
        name: task_code
        description: The key for staticblock
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Task'
        "403":
          description: :task_code is empty
  /task/taskDel/{task_code}:
    delete:
      tags:
      - task
      description: |-
        delete the task
        <br>
      operationId: TaskController.DeleteTask
      parameters:
      - in: path
        name: task_code
        description: The task_code you want to delete
        required: true
        type: string
      responses:
        "200":
          description: '{string} delete success!'
        "403":
          description: '{task_code} is empty'
  /task/taskUpd/{task_code}:
    post:
      tags:
      - task
      description: |-
        update the task
        <br>
      operationId: TaskController.UpdateTask
      parameters:
      - in: path
        name: task_code
        description: The task_code you want to update
        required: true
        type: string
      - in: body
        name: body
        description: body for task content
        required: true
        schema:
          $ref: '#/definitions/models.Task'
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Task'
        "403":
          description: :task_code is wrong format
  /user/:
    get:
      tags:
      - user
      description: |-
        get all Users
        <br>
      operationId: UserController.GetAll
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.User'
    post:
      tags:
      - user
      description: |-
        create users
        <br>
      operationId: UserController.CreateUser
      parameters:
      - in: body
        name: body
        description: body for user content
        required: true
        schema:
          $ref: '#/definitions/models.User'
      responses:
        "200":
          description: '{int} models.User.Id'
        "403":
          description: body is empty
  /user/{uid}:
    get:
      tags:
      - user
      description: |-
        get user by uid
        <br>
      operationId: UserController.Get
      parameters:
      - in: path
        name: uid
        description: The key for staticblock
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.User'
        "403":
          description: :uid is empty
    put:
      tags:
      - user
      description: |-
        update the user
        <br>
      operationId: UserController.Update
      parameters:
      - in: path
        name: uid
        description: The uid you want to update
        required: true
        type: string
      - in: body
        name: body
        description: body for user content
        required: true
        schema:
          $ref: '#/definitions/models.User'
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.User'
        "403":
          description: :uid is not int
    delete:
      tags:
      - user
      description: |-
        delete the user
        <br>
      operationId: UserController.Delete
      parameters:
      - in: path
        name: uid
        description: The uid you want to delete
        required: true
        type: string
      responses:
        "200":
          description: '{string} delete success!'
        "403":
          description: uid is empty
  /user/login:
    get:
      tags:
      - user
      description: |-
        Logs user into the system
        <br>
      operationId: UserController.Login
      parameters:
      - in: query
        name: username
        description: The username for login
        required: true
        type: string
      - in: query
        name: password
        description: The password for login
        required: true
        type: string
      responses:
        "200":
          description: '{string} login success'
        "403":
          description: user not exist
  /user/logout:
    get:
      tags:
      - user
      description: |-
        Logs out current logged in user session
        <br>
      operationId: UserController.logout
      responses:
        "200":
          description: '{string} logout success'
definitions:
  models.Task:
    title: Task
    type: object
    properties:
      Description:
        type: string
      EndDate:
        type: string
        format: datetime
      Id:
        type: integer
        format: int64
      Location:
        type: string
      StartDate:
        type: string
        format: datetime
      Task_code:
        type: string
      Title:
        type: string
  models.User:
    title: User
    type: object
    properties:
      Id:
        type: integer
        format: int64
      Password:
        type: string
      Task:
        $ref: '#/definitions/models.Task'
      UserCode:
        type: string
      Username:
        type: string
tags:
- name: task
  description: |
    Operations about Tasks
- name: user
  description: |
    Operations about Users(unavailable)
